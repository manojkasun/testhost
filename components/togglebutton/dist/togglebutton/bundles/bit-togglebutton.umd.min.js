!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common"),require("@angular/forms")):"function"==typeof define&&define.amd?define("@bit/primefaces.primeng.togglebutton",["exports","@angular/core","@angular/common","@angular/forms"],t):t(((e=e||self).bit=e.bit||{},e.bit.togglebutton={}),e.ng.core,e.ng.common,e.ng.forms)}(this,function(e,t,o,n){"use strict";var i={provide:n.NG_VALUE_ACCESSOR,useExisting:t.forwardRef(function(){return c}),multi:!0},c=function(){function e(){this.onLabel="Yes",this.offLabel="No",this.iconPos="left",this.onChange=new t.EventEmitter,this.checked=!1,this.focus=!1,this.onModelChange=function(){},this.onModelTouched=function(){}}return e.prototype.ngAfterViewInit=function(){this.checkboxViewChild&&(this.checkbox=this.checkboxViewChild.nativeElement)},e.prototype.toggle=function(e){this.disabled||(this.checked=!this.checked,this.onModelChange(this.checked),this.onModelTouched(),this.onChange.emit({originalEvent:e,checked:this.checked}),this.checkbox&&this.checkbox.focus())},e.prototype.onFocus=function(){this.focus=!0},e.prototype.onBlur=function(){this.focus=!1,this.onModelTouched()},e.prototype.writeValue=function(e){this.checked=e},e.prototype.registerOnChange=function(e){this.onModelChange=e},e.prototype.registerOnTouched=function(e){this.onModelTouched=e},e.prototype.setDisabledState=function(e){this.disabled=e},Object.defineProperty(e.prototype,"hasOnLabel",{get:function(){return this.onLabel&&this.onLabel.length>0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"hasOffLabel",{get:function(){return this.onLabel&&this.onLabel.length>0},enumerable:!0,configurable:!0}),e.decorators=[{type:t.Component,args:[{selector:"p-toggleButton",template:'\n        <div [ngClass]="{\'ui-button ui-togglebutton ui-widget ui-state-default ui-corner-all\': true, \'ui-button-text-only\': (!onIcon && !offIcon), \n                \'ui-button-text-icon-left\': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === \'left\'), \n                \'ui-button-text-icon-right\': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === \'right\'),\'ui-button-icon-only\': (onIcon && offIcon && !hasOnLabel && !hasOffLabel),\n                \'ui-state-active\': checked,\'ui-state-focus\':focus,\'ui-state-disabled\':disabled}" [ngStyle]="style" [class]="styleClass" \n                (click)="toggle($event)" (keydown.enter)="toggle($event)">\n            <div class="ui-helper-hidden-accessible">\n                <input #checkbox type="checkbox" [attr.id]="inputId" [checked]="checked" (focus)="onFocus()" (blur)="onBlur()" [attr.tabindex]="tabindex">\n            </div>\n            <span *ngIf="onIcon||offIcon" class="ui-button-icon-left" [class]="checked ? this.onIcon : this.offIcon" [ngClass]="{\'ui-button-icon-left\': (iconPos === \'left\'), \n            \'ui-button-icon-right\': (iconPos === \'right\')}"></span>\n            <span class="ui-button-text ui-unselectable-text">{{checked ? hasOnLabel ? onLabel : \'ui-btn\' : hasOffLabel ? offLabel : \'ui-btn\'}}</span>\n        </div>\n    ',providers:[i]}]}],e.propDecorators={onLabel:[{type:t.Input}],offLabel:[{type:t.Input}],onIcon:[{type:t.Input}],offIcon:[{type:t.Input}],disabled:[{type:t.Input}],style:[{type:t.Input}],styleClass:[{type:t.Input}],inputId:[{type:t.Input}],tabindex:[{type:t.Input}],iconPos:[{type:t.Input}],onChange:[{type:t.Output}],checkboxViewChild:[{type:t.ViewChild,args:["checkbox",{static:!1}]}]},e}(),s=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[o.CommonModule],exports:[c],declarations:[c]}]}],e}();e.TOGGLEBUTTON_VALUE_ACCESSOR=i,e.ToggleButton=c,e.ToggleButtonModule=s,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=bit-togglebutton.umd.min.js.map
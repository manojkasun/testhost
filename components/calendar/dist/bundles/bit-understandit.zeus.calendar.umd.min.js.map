{"version":3,"sources":["ng://@bit/understandit.zeus.calendar/calendar-month.ts","ng://@bit/understandit.zeus.calendar/calendar.component.ts","ng://@bit/understandit.zeus.calendar/calendar.module.ts"],"names":["CalendarMonth","date","this","weeks","generateWeeks","prototype","today","Date","t0","dayjs","startOf","i","WEEKS_IN_CALENDAR_MONTH","week","d","DAYS_IN_WEEK","push","toDate","day","format","inMonth","isSame","hasActivity","isToday","selected","add","getDayByIndex","index","Math","floor","getNextMonth","getPreviousMonth","subtract","DAYS_IN_CALENDAR_MONTH","CalendarComponent","_value","currentMonth","Object","defineProperty","value","goTo","goNext","goPrev","month","isSelected","Component","args","selector","template","CalendarModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"okBAqBA,IAAAA,EAAA,WAQE,SAAAA,EAAmBC,GAAAC,KAAAD,KAAAA,EACjBC,KAAKC,MAAQD,KAAKE,cAAcF,KAAKD,MA2DzC,OA/CED,EAAAK,UAAAD,cAAA,SAAcH,GAIZ,QAHMK,EAAQ,IAAIC,KACdC,EAAKC,EAAMR,GAAMS,QAAQ,SAASA,QAAQ,QAC1CP,EAAiB,GACZQ,EAAI,EAAGA,EAAIX,EAAcY,wBAAyBD,IAAK,CAE9D,QADIE,EAAc,GACTC,EAAI,EAAGA,EAAId,EAAce,aAAcD,IAC9CD,EAAKG,KAAK,CACRf,KAAMO,EAAGS,SACTC,IAAKV,EAAGW,OAAO,KACfC,QAASZ,EAAGa,OAAOpB,EAAM,SACzBqB,aAAa,EACbC,QAASf,EAAGa,OAAOf,EAAO,OAC1BkB,UAAU,IAEZhB,EAAKA,EAAGiB,IAAI,EAAG,OAEjBtB,EAAMa,KAAKH,GAEb,OAAOV,GAYTH,EAAAK,UAAAqB,cAAA,SAAcC,GACZ,OAAOzB,KAAKC,MAAMyB,KAAKC,MAAMF,EAAQ3B,EAAce,eAAeY,EAAQ3B,EAAce,eAG1Ff,EAAAK,UAAAyB,aAAA,WACE,OAAO,IAAI9B,EAAcS,EAAMP,KAAKD,MAAMwB,IAAI,EAAG,SAASR,WAG5DjB,EAAAK,UAAA0B,iBAAA,WACE,OAAO,IAAI/B,EAAcS,EAAMP,KAAKD,MAAM+B,SAAS,EAAG,SAASf,WAGjEjB,EAAAK,UAAAe,QAAA,SAAQnB,GACN,OAAOQ,EAAMP,KAAKD,MAAMoB,OAAOpB,EAAM,UA7DhCD,EAAAe,aAAe,EACff,EAAAY,wBAA0B,EAC1BZ,EAAAiC,uBAAyBjC,EAAce,aAAef,EAAcY,wBA8D7EZ,EApEA,oBCsCE,SAAAkC,IA/CAhC,KAAAI,MAAQ,IAAIC,KAiDVL,KAAKiC,OAAS,IAAI5B,KAClBL,KAAKkC,aAAe,IAAIpC,EAAcE,KAAKiC,QAoC/C,OArDEE,OAAAC,eAAIJ,EAAA7B,UAAA,QAAK,KAUT,WACE,OAAOH,KAAKiC,YAXd,SAAUI,GACJA,IAAUrC,KAAKiC,SACjBjC,KAAKiC,OAASI,EAETrC,KAAKkC,cAAiBlC,KAAKkC,aAAahB,QAAQmB,IACnDrC,KAAKsC,KAAK,IAAIxC,EAAcuC,sCAelCL,EAAA7B,UAAAoC,OAAA,WACEvC,KAAKsC,KAAKtC,KAAKkC,aAAaN,iBAG9BI,EAAA7B,UAAAqC,OAAA,WACExC,KAAKsC,KAAKtC,KAAKkC,aAAaL,qBAG9BG,EAAA7B,UAAAmC,KAAA,SAAKG,GACHzC,KAAKkC,aAAeO,GAItBT,EAAA7B,UAAAiB,YAAA,SAAYJ,GACV,OAAO,GAITgB,EAAA7B,UAAAuC,WAAA,SAAW1B,GACT,OAAO,uBA/EV2B,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,eACVC,SAAA,i/EA2FFd,sBC9FA,SAAAe,KAS8B,2BAT7BC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,aAAc,CAACjB,GACfkB,QAAS,CACPC,EAAAA,cAEFC,QAAS,CACPpB,OAG0Be","sourcesContent":["/**\n * @file \n */\n\nimport dayjs from 'dayjs';\n\n/**\n * Represents a day in the calendar month.\n */\nexport interface Day {\n  date: Date;\n  day: string;\n  inMonth: boolean;\n  hasActivity: boolean;\n  isToday: boolean;\n  selected: boolean;\n}\n\n/**\n * Class to represent a calendar month used in the calendar component.\n */\nexport class CalendarMonth {\n\n  weeks: Day[][];\n\n  static DAYS_IN_WEEK = 7;\n  static WEEKS_IN_CALENDAR_MONTH = 6;\n  static DAYS_IN_CALENDAR_MONTH = CalendarMonth.DAYS_IN_WEEK * CalendarMonth.WEEKS_IN_CALENDAR_MONTH;\n\n  constructor(public date: Date) {\n    this.weeks = this.generateWeeks(this.date);\n  }\n\n  /**\n   * Generate days and weeks in a calendar month.\n   *\n   * @param date\n   *   Date in month to generate.\n   *\n   * @return\n   *   Two dimensional array representing the calendar month.\n   */\n  generateWeeks(date: Date): Day[][] {\n    const today = new Date();\n    let t0 = dayjs(date).startOf('month').startOf('week');\n    let weeks: Day[][] = [];\n    for (let i = 0; i < CalendarMonth.WEEKS_IN_CALENDAR_MONTH; i++) {\n      let week: Day[] = [];\n      for (let d = 0; d < CalendarMonth.DAYS_IN_WEEK; d++) {\n        week.push({\n          date: t0.toDate(),\n          day: t0.format('D'),\n          inMonth: t0.isSame(date, 'month'),\n          hasActivity: false,\n          isToday: t0.isSame(today, 'day'),\n          selected: false,\n        });\n        t0 = t0.add(1, 'day');\n      }\n      weeks.push(week);\n    }\n    return weeks;\n  }\n\n  /**\n   * Gets a day given index in calendar month.\n   *\n   * @param index\n   *   Index to get.\n   *\n   * @returns\n   *   Day on given index.\n   */\n  getDayByIndex(index: number): Day {\n    return this.weeks[Math.floor(index / CalendarMonth.DAYS_IN_WEEK)][index % CalendarMonth.DAYS_IN_WEEK];\n  }\n\n  getNextMonth() {\n    return new CalendarMonth(dayjs(this.date).add(1, 'month').toDate());\n  }\n\n  getPreviousMonth() {\n    return new CalendarMonth(dayjs(this.date).subtract(1, 'month').toDate());\n  }\n\n  inMonth(date: Date) {\n    return dayjs(this.date).isSame(date, 'month');\n  }\n\n}\n","import { Component, Input, HostListener } from '@angular/core';\n\nimport { CalendarMonth } from './calendar-month';\nimport { analyzeAndValidateNgModules } from '@angular/compiler';\n\n@Component({\n  selector: 'app-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n})\nexport class CalendarComponent {\n\n  today = new Date();\n  currentMonth: CalendarMonth;\n\n  private _value: Date;\n\n  // @Output()\n  // viewChange = new EventEmitter<Month>(true);\n\n  // @Output()\n  // valueChange = new EventEmitter<Date>(true);\n\n  // @Input()\n  // set dataSource(data: EventResponse[]) {\n\n  //   if (!this.currentMonth) {\n  //     return;\n  //   }\n\n  //   let event = getNextEventDay(data);\n  //   for (let dayIndex = 0; dayIndex < DAYS_IN_CALENDAR_MONTH; dayIndex++) {\n  //     let day = this.currentMonth.getDayByIndex(dayIndex);\n\n  //     if (event && Moment(event.date.value).isSame(day.date, 'day')) {\n  //       day.hasActivity = true;\n  //       // Advance event index to next event not on same day\n  //       event = getNextEventDay(data, event);\n  //     }\n  //     else {\n  //       day.hasActivity = false;\n  //     }\n  //   }\n  // }\n\n  set value(value: Date) {\n    if (value !== this._value) {\n      this._value = value;\n      // this.valueChange.emit(value);\n      if (!this.currentMonth || !this.currentMonth.inMonth(value)) {\n        this.goTo(new CalendarMonth(value));\n      }\n    }\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  constructor() {\n    // Set default value to current date.\n    this._value = new Date();\n    this.currentMonth = new CalendarMonth(this._value);\n  }\n\n  goNext() {\n    this.goTo(this.currentMonth.getNextMonth());\n  }\n\n  goPrev() {\n    this.goTo(this.currentMonth.getPreviousMonth());\n  }\n\n  goTo(month: CalendarMonth) {\n    this.currentMonth = month;\n    // this.viewChange.emit(this.currentMonth);\n  }\n\n  hasActivity(day: Date) {\n    return false;\n    //return this.dataSource && this.dataSource.some(x => Moment(x.date.value).isSame(day, 'day'));\n  }\n\n  isSelected(day: Date) {\n    return false;\n    // return Moment(day).isSame(this._value, 'day');\n  }\n\n  // @HostListener('swipe', ['$event'])\n  // onSwipe(event) {\n  //   if (event.velocityX > 0) {\n  //     this.goPrev();\n  //   }\n  //   else if (event.velocityX < 0) {\n  //     this.goNext();\n  //   }\n  // }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CalendarComponent } from './calendar.component';\n\n@NgModule({\n  declarations: [CalendarComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    CalendarComponent\n  ]\n})\nexport class CalendarModule { }\n"]}